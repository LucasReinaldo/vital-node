/* tslint:disable */
/* eslint-disable */
/**
 * Vital
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ClientFacingWebhook } from '../models';
import { ClientWebhookResponse } from '../models';
import { HTTPValidationError } from '../models';
import { WebhookRegister } from '../models';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * DELETE sepecific webhook
         * @summary Delete Webhook
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook: async (webhookId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling deleteWebhook.');
            }
            const localVarPath = `/v1/webhooks/{webhook_id}`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * GET List of team webhooks
         * @summary Get Registered Webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegisteredWebhooks: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/webhooks/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * POST Register webhook for team.
         * @summary Register Webhook
         * @param {WebhookRegister} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWebhook: async (body: WebhookRegister, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerWebhook.');
            }
            const localVarPath = `/v1/webhooks/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * DELETE sepecific webhook
         * @summary Delete Webhook
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWebhook(webhookId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientFacingWebhook>> {
            const localVarAxiosArgs = await WebhooksApiAxiosParamCreator(configuration).deleteWebhook(webhookId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * GET List of team webhooks
         * @summary Get Registered Webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegisteredWebhooks(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientWebhookResponse>> {
            const localVarAxiosArgs = await WebhooksApiAxiosParamCreator(configuration).getRegisteredWebhooks(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * POST Register webhook for team.
         * @summary Register Webhook
         * @param {WebhookRegister} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerWebhook(body: WebhookRegister, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientFacingWebhook>> {
            const localVarAxiosArgs = await WebhooksApiAxiosParamCreator(configuration).registerWebhook(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * DELETE sepecific webhook
         * @summary Delete Webhook
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook(webhookId: string, options?: any): AxiosPromise<ClientFacingWebhook> {
            return WebhooksApiFp(configuration).deleteWebhook(webhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * GET List of team webhooks
         * @summary Get Registered Webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegisteredWebhooks(options?: any): AxiosPromise<ClientWebhookResponse> {
            return WebhooksApiFp(configuration).getRegisteredWebhooks(options).then((request) => request(axios, basePath));
        },
        /**
         * POST Register webhook for team.
         * @summary Register Webhook
         * @param {WebhookRegister} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWebhook(body: WebhookRegister, options?: any): AxiosPromise<ClientFacingWebhook> {
            return WebhooksApiFp(configuration).registerWebhook(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * DELETE sepecific webhook
     * @summary Delete Webhook
     * @param {string} webhookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public deleteWebhook(webhookId: string, options?: any) {
        return WebhooksApiFp(this.configuration).deleteWebhook(webhookId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * GET List of team webhooks
     * @summary Get Registered Webhooks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public getRegisteredWebhooks(options?: any) {
        return WebhooksApiFp(this.configuration).getRegisteredWebhooks(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * POST Register webhook for team.
     * @summary Register Webhook
     * @param {WebhookRegister} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public registerWebhook(body: WebhookRegister, options?: any) {
        return WebhooksApiFp(this.configuration).registerWebhook(body, options).then((request) => request(this.axios, this.basePath));
    }
}
