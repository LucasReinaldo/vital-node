/* tslint:disable */
/* eslint-disable */
/**
 * Vital
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ClientSleepResponse } from '../models';
import { HTTPValidationError } from '../models';
/**
 * SleepApi - axios parameter creator
 * @export
 */
export const SleepApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Daily Sleep data for user_key
         * @summary Get User Sleep
         * @param {string} userKey 
         * @param {Date} startDate Date from in YYYY-MM-DD
         * @param {Date} endDate Date to in YYYY-MM-DD
         * @param {string} [provider] Provider oura/strava etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSleep: async (userKey: string, startDate: Date, endDate: Date, provider?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userKey' is not null or undefined
            if (userKey === null || userKey === undefined) {
                throw new RequiredError('userKey','Required parameter userKey was null or undefined when calling getUserSleep.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling getUserSleep.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling getUserSleep.');
            }
            const localVarPath = `/v1/sleep/{user_key}`
                .replace(`{${"user_key"}}`, encodeURIComponent(String(userKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SleepApi - functional programming interface
 * @export
 */
export const SleepApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Daily Sleep data for user_key
         * @summary Get User Sleep
         * @param {string} userKey 
         * @param {Date} startDate Date from in YYYY-MM-DD
         * @param {Date} endDate Date to in YYYY-MM-DD
         * @param {string} [provider] Provider oura/strava etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSleep(userKey: string, startDate: Date, endDate: Date, provider?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientSleepResponse>> {
            const localVarAxiosArgs = await SleepApiAxiosParamCreator(configuration).getUserSleep(userKey, startDate, endDate, provider, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SleepApi - factory interface
 * @export
 */
export const SleepApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get Daily Sleep data for user_key
         * @summary Get User Sleep
         * @param {string} userKey 
         * @param {Date} startDate Date from in YYYY-MM-DD
         * @param {Date} endDate Date to in YYYY-MM-DD
         * @param {string} [provider] Provider oura/strava etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSleep(userKey: string, startDate: Date, endDate: Date, provider?: string, options?: any): AxiosPromise<ClientSleepResponse> {
            return SleepApiFp(configuration).getUserSleep(userKey, startDate, endDate, provider, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SleepApi - object-oriented interface
 * @export
 * @class SleepApi
 * @extends {BaseAPI}
 */
export class SleepApi extends BaseAPI {
    /**
     * Get Daily Sleep data for user_key
     * @summary Get User Sleep
     * @param {string} userKey 
     * @param {Date} startDate Date from in YYYY-MM-DD
     * @param {Date} endDate Date to in YYYY-MM-DD
     * @param {string} [provider] Provider oura/strava etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SleepApi
     */
    public getUserSleep(userKey: string, startDate: Date, endDate: Date, provider?: string, options?: any) {
        return SleepApiFp(this.configuration).getUserSleep(userKey, startDate, endDate, provider, options).then((request) => request(this.axios, this.basePath));
    }
}
